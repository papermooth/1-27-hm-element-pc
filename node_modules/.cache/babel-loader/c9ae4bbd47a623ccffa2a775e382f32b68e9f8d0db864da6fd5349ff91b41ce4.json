{"ast":null,"code":"import _Message2 from \"element-ui/lib/theme-chalk/message.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Message from \"element-ui/lib/message\";\nimport \"core-js/modules/es.array.push.js\";\n// 这个模块是对于axios实例的封装\n/* 封装axios用于发送请求 */\nimport router from '@/router';\nimport store from '@/store';\nimport axios from 'axios';\n// 创建一个新的axios实例\nconst request = axios.create({\n  baseURL: 'http://interview-api-t.itheima.net/',\n  timeout: 5000\n});\n\n// 添加请求拦截器\nrequest.interceptors.request.use(function (config) {\n  const token = store.state.user.token;\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  // 在发送请求之前做些什么\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\nrequest.interceptors.response.use(function (response) {\n  // 对响应数据做点什么\n  return response.data;\n}, function (error) {\n  // 所有的响应错误信息，统一处理\n  if (error.response) {\n    console.log(error.response);\n    // 错误也需要细分情况\n    // 1. 如果是 401 错误，说明 token 失效，给提示，清除失效token，拦登录\n    if (error.response.status === 401) {\n      _Message.error('尊敬的用户，当前登录状态已过期');\n      // 提交清除的mutation，完成失效token的移除\n      store.commit('user/logout');\n      // 拦截到登录\n      router.push('/login');\n    } else {\n      // 2. 如果是 其他 错误，正常给提示\n      _Message.error(error.response.data.message);\n    }\n  }\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["router","store","axios","request","create","baseURL","timeout","interceptors","use","config","token","state","user","headers","Authorization","error","Promise","reject","response","data","console","log","status","_Message","commit","push","message"],"sources":["/Users/bufferhh/Desktop/hm-element-pc/src/utils/request.js"],"sourcesContent":["// 这个模块是对于axios实例的封装\n/* 封装axios用于发送请求 */\nimport router from '@/router'\nimport store from '@/store'\nimport axios from 'axios'\nimport { Message } from 'element-ui'\n\n// 创建一个新的axios实例\nconst request = axios.create({\n  baseURL: 'http://interview-api-t.itheima.net/',\n  timeout: 5000\n})\n\n// 添加请求拦截器\nrequest.interceptors.request.use(function (config) {\n  const token = store.state.user.token\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  // 在发送请求之前做些什么\n  return config\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error)\n})\n\n// 添加响应拦截器\nrequest.interceptors.response.use(function (response) {\n  // 对响应数据做点什么\n  return response.data\n}, function (error) {\n  // 所有的响应错误信息，统一处理\n  if (error.response) {\n    console.log(error.response)\n    // 错误也需要细分情况\n    // 1. 如果是 401 错误，说明 token 失效，给提示，清除失效token，拦登录\n    if (error.response.status === 401) {\n      Message.error('尊敬的用户，当前登录状态已过期')\n      // 提交清除的mutation，完成失效token的移除\n      store.commit('user/logout')\n      // 拦截到登录\n      router.push('/login')\n    } else {\n      // 2. 如果是 其他 错误，正常给提示\n      Message.error(error.response.data.message)\n    }\n  }\n  // 对响应错误做点什么\n  return Promise.reject(error)\n})\n\nexport default request\n"],"mappings":";;;;AAAA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,KAAK,MAAM,OAAO;AAGzB;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,qCAAqC;EAC9CC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAAC,UAAUC,MAAM,EAAE;EACjD,MAAMC,KAAK,GAAGT,KAAK,CAACU,KAAK,CAACC,IAAI,CAACF,KAAK;EACpC,IAAIA,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,UAASJ,KAAM,EAAC;EAClD;EACA;EACA,OAAOD,MAAM;AACf,CAAC,EAAE,UAAUM,KAAK,EAAE;EAClB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAZ,OAAO,CAACI,YAAY,CAACW,QAAQ,CAACV,GAAG,CAAC,UAAUU,QAAQ,EAAE;EACpD;EACA,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EAAE,UAAUJ,KAAK,EAAE;EAClB;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClBE,OAAO,CAACC,GAAG,CAACN,KAAK,CAACG,QAAQ,CAAC;IAC3B;IACA;IACA,IAAIH,KAAK,CAACG,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACjCC,QAAA,CAAQR,KAAK,CAAC,iBAAiB,CAAC;MAChC;MACAd,KAAK,CAACuB,MAAM,CAAC,aAAa,CAAC;MAC3B;MACAxB,MAAM,CAACyB,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC,MAAM;MACL;MACAF,QAAA,CAAQR,KAAK,CAACA,KAAK,CAACG,QAAQ,CAACC,IAAI,CAACO,OAAO,CAAC;IAC5C;EACF;EACA;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAeZ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}