{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'LoginIndex',\n  data() {\n    return {\n      form: {\n        username: '',\n        password: ''\n      },\n      rules: {\n        username: [\n        // 1. required 非空校验\n        // 2. message 错误提示\n        // 3. trigger 触发校验的时机 blur 失焦的时候触发，change 输入框值改变的时候触发\n        // 4. min 长度最小值，max 长度最大值\n        // 5. pattern 正则校验\n        {\n          required: true,\n          message: '请输入用户名',\n          trigger: ['blur', 'change']\n        }, {\n          min: 5,\n          max: 11,\n          message: '长度在 5~11 个字符',\n          trigger: ['blur', 'change']\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: ['blur', 'change']\n        }, {\n          pattern: /^\\w{5,11}$/,\n          message: '长度在 5~11 个字符',\n          trigger: ['blur', 'change']\n        }]\n      }\n    };\n  },\n  methods: {\n    async login() {\n      // 登录时，需要先校验，校验通过才能发请求\n      // 校验：通过 ref 和 $refs 拿到 el-form 组件，调用组件的校验方法\n      // console.log(this.$refs.form)\n      try {\n        await this.$refs.form.validate();\n        // 调用action(异步) async函数的调用会返回一个promise\n        await this.$store.dispatch('user/loginAction', this.form);\n        this.$message.success('恭喜登录成功');\n        this.$router.push('/');\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    reset() {\n      // 点击重置，重置表单\n      // 重置：通过 ref 和 $refs 拿到 el-form 组件，调用组件的重置方法\n      this.$refs.form.resetFields();\n    }\n  }\n};","map":{"version":3,"names":["name","data","form","username","password","rules","required","message","trigger","min","max","pattern","methods","login","$refs","validate","$store","dispatch","$message","success","$router","push","e","console","log","reset","resetFields"],"sources":["src/views/login/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-page\">\r\n    <el-card class=\"login-card\">\r\n      <template #header>黑马面经运营后台</template>\r\n\r\n      <!-- 表单\r\n           1. el-form组件：包裹整个表单范围 (表单的整体)\r\n           2. el-form-item组件：表单域 (表单的一行)\r\n           3. el-input组件：输入框组件\r\n           4. el-button组件：按钮组件\r\n\r\n           表单校验：\r\n           1. el-form: model & rules\r\n              model 绑定的是一个form对象，集中收集管理整个表单的数据 (将来校验也会方便)\r\n              rules 绑定的是规则列表，\r\n              格式：\r\n              {\r\n                字段名1: [ {}, {} ],\r\n                字段名2: [ {}, {} ],\r\n              }\r\n\r\n           2. el-form-item: 绑定 prop 属性 → 指定应用哪个字段规则\r\n\r\n           3. el-input: 绑定 v-model → 收集表单数据\r\n      -->\r\n      <el-form ref=\"form\" :model=\"form\" :rules=\"rules\">\r\n        <el-form-item label=\"用户名：\" prop=\"username\">\r\n          <el-input id=\"username\"  v-model=\"form.username\" placeholder=\"请输入用户名\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码：\" prop=\"password\">\r\n          <el-input id=\"password\" v-model=\"form.password\" type=\"password\" placeholder=\"请输入用户密码\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item class=\"tc\">\r\n          <el-button type=\"primary\" @click=\"login\">登录</el-button>\r\n          <el-button @click=\"reset\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'LoginIndex',\r\n  data () {\r\n    return {\r\n      form: {\r\n        username: '',\r\n        password: ''\r\n      },\r\n      rules: {\r\n        username: [\r\n          // 1. required 非空校验\r\n          // 2. message 错误提示\r\n          // 3. trigger 触发校验的时机 blur 失焦的时候触发，change 输入框值改变的时候触发\r\n          // 4. min 长度最小值，max 长度最大值\r\n          // 5. pattern 正则校验\r\n          { required: true, message: '请输入用户名', trigger: ['blur', 'change'] },\r\n          { min: 5, max: 11, message: '长度在 5~11 个字符', trigger: ['blur', 'change'] }\r\n        ],\r\n        password: [\r\n          { required: true, message: '请输入密码', trigger: ['blur', 'change'] },\r\n          {pattern: /^\\w{5,11}$/, message: '长度在 5~11 个字符', trigger: ['blur', 'change'] }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async login () {\r\n      // 登录时，需要先校验，校验通过才能发请求\r\n      // 校验：通过 ref 和 $refs 拿到 el-form 组件，调用组件的校验方法\r\n      // console.log(this.$refs.form)\r\n      try {\r\n        await this.$refs.form.validate()\r\n        // 调用action(异步) async函数的调用会返回一个promise\r\n        await this.$store.dispatch('user/loginAction', this.form)\r\n        this.$message.success('恭喜登录成功')\r\n        this.$router.push('/')\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    },\r\n    reset () {\r\n      // 点击重置，重置表单\r\n      // 重置：通过 ref 和 $refs 拿到 el-form 组件，调用组件的重置方法\r\n      this.$refs.form.resetFields()\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n// scoped加上后，所有的样式，只会作用于当前组件模板\r\n// 但是：有时候我们也需要向下渗透，影响到组件内部的一些内容样式 → 深度作用选择器\r\n// (1) less  /deep/ 选择器前面添加 /deep/\r\n// (2) scss  ::v-deep 选择器前面加上 ::v-deep\r\n.login-page {\r\n  min-height: 100vh;\r\n  background: url(@/assets/login-bg.svg) no-repeat center / cover;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  .el-card {\r\n    width: 420px;\r\n    ::v-deep .el-card__header{\r\n      height: 80px;\r\n      line-height: 40px;\r\n      background: rgba(114,124,245,1);\r\n      text-align: center;\r\n      color: #fff;\r\n      font-size: 18px;\r\n    }\r\n  }\r\n  .el-form {\r\n    padding: 0 20px;\r\n  }\r\n  .tc {\r\n    text-align: center;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";AA0CA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,QAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACAF,QAAA;QACA;QACA;QACA;QACA;QACA;QACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,QAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAG,OAAA;UAAAJ,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAI,OAAA;IACA,MAAAC,MAAA;MACA;MACA;MACA;MACA;QACA,WAAAC,KAAA,CAAAZ,IAAA,CAAAa,QAAA;QACA;QACA,WAAAC,MAAA,CAAAC,QAAA,0BAAAf,IAAA;QACA,KAAAgB,QAAA,CAAAC,OAAA;QACA,KAAAC,OAAA,CAAAC,IAAA;MACA,SAAAC,CAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,CAAA;MACA;IACA;IACAG,MAAA;MACA;MACA;MACA,KAAAX,KAAA,CAAAZ,IAAA,CAAAwB,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}