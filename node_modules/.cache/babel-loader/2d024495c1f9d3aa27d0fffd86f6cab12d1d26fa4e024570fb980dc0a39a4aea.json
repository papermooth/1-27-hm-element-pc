{"ast":null,"code":"import { createArticle, getArticleDetail, getArticleList, removeArticle, updateArticle } from '@/api/article';\nimport 'quill/dist/quill.core.css';\nimport 'quill/dist/quill.snow.css';\nimport 'quill/dist/quill.bubble.css';\nimport { quillEditor } from 'vue-quill-editor';\nexport default {\n  name: 'article-page',\n  data() {\n    return {\n      tableData: [],\n      current: 1,\n      // 当前页\n      pageSize: 5,\n      // 每页条数\n      total: 0,\n      isShowDrawer: false,\n      // 控制抽屉的展示\n      drawerType: 'add',\n      // 默认认为是添加框，add preivew edit\n      form: {\n        stem: '',\n        // 标题\n        content: '' // 内容\n      },\n      rules: {\n        stem: [{\n          required: true,\n          message: '请输入标题内容',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入文章内容',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    this.initData();\n  },\n  components: {\n    quillEditor\n  },\n  computed: {\n    drawerTitle() {\n      let title = '标题';\n      if (this.drawerType === 'add') title = '添加面经';\n      if (this.drawerType === 'preview') title = '面经预览';\n      if (this.drawerType === 'edit') title = '修改面经';\n      return title;\n    }\n  },\n  methods: {\n    // 共用的打开抽屉的方法\n    async openDrawer(type, id) {\n      this.drawerType = type;\n      this.isShowDrawer = true;\n      // 添加/编辑/预览 => openDrawer，但是只有编辑和预览有id\n      if (type !== 'add') {\n        const res = await getArticleDetail(id);\n        this.form = {\n          ...res.data\n        };\n      }\n    },\n    handleClose(done) {\n      // $confirm 可以弹出一个确认框，可确认.then  可取消.catch\n      this.$confirm('你确认要关闭么？').then(() => {\n        // done() // done() 调用，就代表关闭抽屉\n        console.log('点击了确认');\n        this.closeDrawer();\n      }).catch(e => {\n        console.log('取消', e);\n      });\n    },\n    async submit() {\n      // 校验 (对整个表单校验)\n      await this.$refs.form.validate();\n      if (this.drawerType === 'add') {\n        // 请求\n        await createArticle(this.form);\n        // 提示\n        this.$message.success('恭喜添加成功');\n      }\n      if (this.drawerType === 'edit') {\n        // 请求\n        const {\n          id,\n          stem,\n          content\n        } = this.form;\n        await updateArticle({\n          id,\n          stem,\n          content\n        });\n        // 提示\n        this.$message.success('恭喜修改成功');\n      }\n\n      // 关闭抽屉\n      this.closeDrawer();\n      // 重新渲染 将当前页重置到第一页\n      // (新增/修改的数据，新增修改都会到第一页去了)\n      this.current = 1;\n      this.initData();\n    },\n    closeDrawer() {\n      // 将form也手动重置\n      this.form = {\n        stem: '',\n        // 标题\n        content: '' // 内容\n      };\n      // 只有非预览的情况(添加/修改) 需要重置\n      if (this.drawerType !== 'preview') {\n        this.$refs.form.resetFields(); // 重置表单\n      }\n      this.isShowDrawer = false; // 关闭抽屉\n    },\n    // 发送初始化请求的方法\n    async initData() {\n      const {\n        data\n      } = await getArticleList({\n        current: this.current,\n        pageSize: this.pageSize\n      });\n      this.total = data.total;\n      this.tableData = data.rows;\n    },\n    async del(id) {\n      // 删除请求\n      await removeArticle(id);\n      // 添加成功的提示\n      this.$message.success('删除成功');\n\n      // 处理删除当前页的最后一条\n      if (this.tableData.length === 1 && this.current > 1) {\n        this.current--;\n      }\n      // 重新渲染\n      this.initData();\n    },\n    // 处理当前页的变化\n    handleCurrentChange(val) {\n      // console.log('当前页变化了', val)\n      // 更新数据中的当前页\n      this.current = val;\n      // 重新请求\n      this.initData();\n    }\n  }\n};","map":{"version":3,"names":["createArticle","getArticleDetail","getArticleList","removeArticle","updateArticle","quillEditor","name","data","tableData","current","pageSize","total","isShowDrawer","drawerType","form","stem","content","rules","required","message","trigger","created","initData","components","computed","drawerTitle","title","methods","openDrawer","type","id","res","handleClose","done","$confirm","then","console","log","closeDrawer","catch","e","submit","$refs","validate","$message","success","resetFields","rows","del","length","handleCurrentChange","val"],"sources":["src/views/article/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"article-page\">\r\n    <!-- 面包屑 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item>面经后台</el-breadcrumb-item>\r\n      <el-breadcrumb-item>面经管理</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 整体的面板部分 -->\r\n    <el-card shadow=\"never\" border=\"false\">\r\n      <!-- 面板头部部分 -->\r\n      <template #header>\r\n        <div class=\"header\">\r\n          <span>共 {{ total }} 条记录</span>\r\n\r\n          <el-button\r\n            @click=\"openDrawer('add')\"\r\n            icon=\"el-icon-plus\"\r\n            size=\"small\"\r\n            type=\"primary\"\r\n            round>\r\n            添加面经\r\n          </el-button>\r\n        </div>\r\n      </template>\r\n\r\n      <!-- 面板主体部分 - 表格 -->\r\n      <!--\r\n        el-table 整个表格组件\r\n          data 配置数据源\r\n        el-table-column 列组件\r\n          prop 配置数据，配置对象中的属性名\r\n          label 表格的列名\r\n          width 表格的宽度\r\n       -->\r\n      <el-table\r\n        :data=\"tableData\"\r\n        style=\"width: 100%\">\r\n        <el-table-column prop=\"stem\" label=\"标题\" width=\"400\"></el-table-column>\r\n        <el-table-column prop=\"creator\" label=\"作者\"></el-table-column>\r\n        <el-table-column prop=\"likeCount\" label=\"点赞\"></el-table-column>\r\n        <el-table-column prop=\"views\" label=\"浏览数\"></el-table-column>\r\n        <el-table-column prop=\"createdAt\" label=\"更新时间\"></el-table-column>\r\n        <el-table-column label=\"编辑\">\r\n          <!-- 通过作用域插槽：提供了 $index下标，row当前行的数据，row.id row.stem -->\r\n          <template #default=\"obj\">\r\n            <div class=\"actions\">\r\n              <i @click=\"openDrawer('preview', obj.row.id)\" class=\"el-icon-view\"></i>\r\n              <i @click=\"openDrawer('edit', obj.row.id)\" class=\"el-icon-edit-outline\"></i>\r\n              <i @click=\"del(obj.row.id)\" class=\"el-icon-delete\"></i>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 分页容器的位置\r\n           @size-change 监听每页条数的变化\r\n           @current-change 监听当前页的变化\r\n           :page-sizes 可供选择的每页条数下拉菜单\r\n           :page-size 设置当前生效的【每页条数】\r\n           :current-page 设置当前生效的【当前页】\r\n           :total  设置【总条数】\r\n           background 按钮底色\r\n      -->\r\n      <el-pagination\r\n        background\r\n        @current-change=\"handleCurrentChange\"\r\n        :current-page=\"current\"\r\n        :page-size=\"pageSize\"\r\n        :total=\"total\"\r\n        layout=\"prev, pager, next\"\r\n      >\r\n      </el-pagination>\r\n    </el-card>\r\n\r\n    <!-- 抽屉区域\r\n         1. title=\"我是标题\"\r\n         2. :visible 控制显示隐藏\r\n         3. :direction=\"direction\"  控制方向\r\n         4. :before-close=\"handleClose\" 关闭抽屉前的处理逻辑\r\n            (比如：询问客户是否真的要关闭？)\r\n         5. size=\"60%\" 窗体所占的区域多宽\r\n    -->\r\n    <el-drawer\r\n      :title=\"drawerTitle\"\r\n      :visible.sync=\"isShowDrawer\"\r\n      direction=\"rtl\"\r\n      :before-close=\"handleClose\"\r\n      size=\"60%\"\r\n    >\r\n      <!-- 只有添加和编辑需要表单 / 预览不需要表单 -->\r\n      <div v-if=\"drawerType === 'preview'\" class=\"article-preview\">\r\n        <h5>{{ form.stem }}</h5>\r\n        <div v-html=\"form.content\"></div>\r\n      </div>\r\n\r\n      <el-form v-else ref=\"form\" :model=\"form\" :rules=\"rules\" label-width=\"80px\">\r\n        <el-form-item label=\"标题\" prop=\"stem\">\r\n          <el-input v-model=\"form.stem\" placeholder=\"请输入面经标题\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"内容\" prop=\"content\">\r\n          <quill-editor @blur=\"$refs.form.validateField('content')\" v-model=\"form.content\"></quill-editor>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button @click=\"submit\" type=\"primary\">确认</el-button>\r\n          <el-button @click=\"handleClose\">取消</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-drawer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { createArticle, getArticleDetail, getArticleList, removeArticle, updateArticle } from '@/api/article'\r\nimport 'quill/dist/quill.core.css'\r\nimport 'quill/dist/quill.snow.css'\r\nimport 'quill/dist/quill.bubble.css'\r\n\r\nimport { quillEditor } from 'vue-quill-editor'\r\n\r\nexport default {\r\n  name: 'article-page',\r\n  data () {\r\n    return {\r\n      tableData: [],\r\n      current: 1, // 当前页\r\n      pageSize: 5, // 每页条数\r\n      total: 0,\r\n      isShowDrawer: false, // 控制抽屉的展示\r\n      drawerType: 'add', // 默认认为是添加框，add preivew edit\r\n      form: {\r\n        stem: '', // 标题\r\n        content: '' // 内容\r\n      },\r\n      rules: {\r\n        stem: [\r\n          { required: true, message: '请输入标题内容', trigger: 'blur' }\r\n        ],\r\n        content: [\r\n          { required: true, message: '请输入文章内容', trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    this.initData()\r\n  },\r\n  components: {\r\n    quillEditor\r\n  },\r\n  computed: {\r\n    drawerTitle () {\r\n      let title = '标题'\r\n\r\n      if (this.drawerType === 'add') title = '添加面经'\r\n      if (this.drawerType === 'preview') title = '面经预览'\r\n      if (this.drawerType === 'edit') title = '修改面经'\r\n\r\n      return title\r\n    }\r\n  },\r\n  methods: {\r\n    // 共用的打开抽屉的方法\r\n    async openDrawer (type, id) {\r\n      this.drawerType = type\r\n      this.isShowDrawer = true\r\n      // 添加/编辑/预览 => openDrawer，但是只有编辑和预览有id\r\n      if (type !== 'add') {\r\n        const res = await getArticleDetail(id)\r\n        this.form = {\r\n          ...res.data\r\n        }\r\n      }\r\n    },\r\n    handleClose (done) {\r\n      // $confirm 可以弹出一个确认框，可确认.then  可取消.catch\r\n      this.$confirm('你确认要关闭么？').then(() => {\r\n        // done() // done() 调用，就代表关闭抽屉\r\n        console.log('点击了确认')\r\n        this.closeDrawer()\r\n      }).catch((e) => {\r\n        console.log('取消', e)\r\n      })\r\n    },\r\n\r\n    async submit () {\r\n      // 校验 (对整个表单校验)\r\n      await this.$refs.form.validate()\r\n\r\n      if (this.drawerType === 'add') {\r\n        // 请求\r\n        await createArticle(this.form)\r\n        // 提示\r\n        this.$message.success('恭喜添加成功')\r\n      }\r\n      if (this.drawerType === 'edit') {\r\n        // 请求\r\n        const { id, stem, content } = this.form\r\n        await updateArticle({ id, stem, content })\r\n        // 提示\r\n        this.$message.success('恭喜修改成功')\r\n      }\r\n\r\n      // 关闭抽屉\r\n      this.closeDrawer()\r\n      // 重新渲染 将当前页重置到第一页\r\n      // (新增/修改的数据，新增修改都会到第一页去了)\r\n      this.current = 1\r\n      this.initData()\r\n    },\r\n\r\n    closeDrawer () {\r\n      // 将form也手动重置\r\n      this.form = {\r\n        stem: '', // 标题\r\n        content: '' // 内容\r\n      }\r\n      // 只有非预览的情况(添加/修改) 需要重置\r\n      if (this.drawerType !== 'preview') {\r\n        this.$refs.form.resetFields() // 重置表单\r\n      }\r\n      this.isShowDrawer = false // 关闭抽屉\r\n    },\r\n\r\n    // 发送初始化请求的方法\r\n    async initData () {\r\n      const { data } = await getArticleList({\r\n        current: this.current,\r\n        pageSize: this.pageSize\r\n      })\r\n      this.total = data.total\r\n      this.tableData = data.rows\r\n    },\r\n    async del (id) {\r\n      // 删除请求\r\n      await removeArticle(id)\r\n      // 添加成功的提示\r\n      this.$message.success('删除成功')\r\n\r\n      // 处理删除当前页的最后一条\r\n      if (this.tableData.length === 1 && this.current > 1) {\r\n        this.current--\r\n      }\r\n      // 重新渲染\r\n      this.initData()\r\n    },\r\n    // 处理当前页的变化\r\n    handleCurrentChange (val) {\r\n      // console.log('当前页变化了', val)\r\n      // 更新数据中的当前页\r\n      this.current = val\r\n      // 重新请求\r\n      this.initData()\r\n    }\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.el-card {\r\n  margin-top: 25px;\r\n  .header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding-right: 16px;\r\n  }\r\n  .actions {\r\n    font-size: 18px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    color: #666;\r\n    > i:hover {\r\n      color: rgba(114, 124, 245, 1);\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n.el-pagination {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n}\r\n.el-breadcrumb {\r\n  margin-top: 10px;\r\n}\r\n.el-form {\r\n  padding-right: 40px;\r\n}\r\n.quill-editor {\r\n  ::v-deep .ql-editor {\r\n    height: 300px;\r\n  }\r\n}\r\n.el-rate {\r\n  padding: 10px 0;\r\n}\r\n.article-preview {\r\n  padding: 0 40px 40px 40px;\r\n  > h5 {\r\n    font-size: 20px;\r\n    color: #666;\r\n    border-bottom: 1px dashed #ccc;\r\n    padding-bottom: 30px;\r\n    margin: 0 0 20px 0;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AAgHA,SAAAA,aAAA,EAAAC,gBAAA,EAAAC,cAAA,EAAAC,aAAA,EAAAC,aAAA;AACA;AACA;AACA;AAEA,SAAAC,WAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,OAAA;MAAA;MACAC,QAAA;MAAA;MACAC,KAAA;MACAC,YAAA;MAAA;MACAC,UAAA;MAAA;MACAC,IAAA;QACAC,IAAA;QAAA;QACAC,OAAA;MACA;MACAC,KAAA;QACAF,IAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,OAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,QAAA;EACA;EACAC,UAAA;IACAlB;EACA;EACAmB,QAAA;IACAC,YAAA;MACA,IAAAC,KAAA;MAEA,SAAAb,UAAA,YAAAa,KAAA;MACA,SAAAb,UAAA,gBAAAa,KAAA;MACA,SAAAb,UAAA,aAAAa,KAAA;MAEA,OAAAA,KAAA;IACA;EACA;EACAC,OAAA;IACA;IACA,MAAAC,WAAAC,IAAA,EAAAC,EAAA;MACA,KAAAjB,UAAA,GAAAgB,IAAA;MACA,KAAAjB,YAAA;MACA;MACA,IAAAiB,IAAA;QACA,MAAAE,GAAA,SAAA9B,gBAAA,CAAA6B,EAAA;QACA,KAAAhB,IAAA;UACA,GAAAiB,GAAA,CAAAxB;QACA;MACA;IACA;IACAyB,YAAAC,IAAA;MACA;MACA,KAAAC,QAAA,aAAAC,IAAA;QACA;QACAC,OAAA,CAAAC,GAAA;QACA,KAAAC,WAAA;MACA,GAAAC,KAAA,CAAAC,CAAA;QACAJ,OAAA,CAAAC,GAAA,OAAAG,CAAA;MACA;IACA;IAEA,MAAAC,OAAA;MACA;MACA,WAAAC,KAAA,CAAA5B,IAAA,CAAA6B,QAAA;MAEA,SAAA9B,UAAA;QACA;QACA,MAAAb,aAAA,MAAAc,IAAA;QACA;QACA,KAAA8B,QAAA,CAAAC,OAAA;MACA;MACA,SAAAhC,UAAA;QACA;QACA;UAAAiB,EAAA;UAAAf,IAAA;UAAAC;QAAA,SAAAF,IAAA;QACA,MAAAV,aAAA;UAAA0B,EAAA;UAAAf,IAAA;UAAAC;QAAA;QACA;QACA,KAAA4B,QAAA,CAAAC,OAAA;MACA;;MAEA;MACA,KAAAP,WAAA;MACA;MACA;MACA,KAAA7B,OAAA;MACA,KAAAa,QAAA;IACA;IAEAgB,YAAA;MACA;MACA,KAAAxB,IAAA;QACAC,IAAA;QAAA;QACAC,OAAA;MACA;MACA;MACA,SAAAH,UAAA;QACA,KAAA6B,KAAA,CAAA5B,IAAA,CAAAgC,WAAA;MACA;MACA,KAAAlC,YAAA;IACA;IAEA;IACA,MAAAU,SAAA;MACA;QAAAf;MAAA,UAAAL,cAAA;QACAO,OAAA,OAAAA,OAAA;QACAC,QAAA,OAAAA;MACA;MACA,KAAAC,KAAA,GAAAJ,IAAA,CAAAI,KAAA;MACA,KAAAH,SAAA,GAAAD,IAAA,CAAAwC,IAAA;IACA;IACA,MAAAC,IAAAlB,EAAA;MACA;MACA,MAAA3B,aAAA,CAAA2B,EAAA;MACA;MACA,KAAAc,QAAA,CAAAC,OAAA;;MAEA;MACA,SAAArC,SAAA,CAAAyC,MAAA,eAAAxC,OAAA;QACA,KAAAA,OAAA;MACA;MACA;MACA,KAAAa,QAAA;IACA;IACA;IACA4B,oBAAAC,GAAA;MACA;MACA;MACA,KAAA1C,OAAA,GAAA0C,GAAA;MACA;MACA,KAAA7B,QAAA;IACA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}